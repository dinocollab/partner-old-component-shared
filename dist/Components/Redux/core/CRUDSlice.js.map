{"version":3,"file":"CRUDSlice.js","sources":["../../../../src/Components/Redux/core/CRUDSlice.ts"],"sourcesContent":["import { NoInfer } from \"@react-spring/types\";\r\nimport {\r\n  ActionReducerMapBuilder,\r\n  AsyncThunk,\r\n  createEntityAdapter,\r\n  createSlice,\r\n  EntityAdapter,\r\n  EntityState,\r\n  IdSelector,\r\n  PayloadAction,\r\n  Update,\r\n} from \"@reduxjs/toolkit\";\r\nimport { ISliceBase, LazyStatus } from \"./type\";\r\nexport const CreateCRUDSlice = <\r\n  TModel,\r\n  TSliceState extends ISliceBase<TModel> = ISliceBase<TModel>\r\n>(\r\n  name: string,\r\n  selectId?: IdSelector<TModel>,\r\n  Initial: (state: ISliceBase<TModel>) => TSliceState = (s) => s as TSliceState,\r\n  extraReducers?: (\r\n    builder: ActionReducerMapBuilder<NoInfer<TSliceState>>,\r\n    adapter: EntityAdapter<TModel>\r\n  ) => void\r\n) => {\r\n  const SliceAdapter = createEntityAdapter<TModel>({\r\n    selectId,\r\n  });\r\n  // Define the initial state using that type\r\n  const initialState: TSliceState = Initial({\r\n    Status: LazyStatus.Loading,\r\n    data: SliceAdapter.getInitialState(),\r\n  });\r\n\r\n  const ModelSlice = createSlice({\r\n    name,\r\n    // `createSlice` will infer the state type from the `initialState` argument\r\n    initialState,\r\n    reducers: {\r\n      Update: (state, action: PayloadAction<Update<TModel>>) => {\r\n        SliceAdapter.updateOne(\r\n          state.data as EntityState<TModel>,\r\n          action.payload\r\n        );\r\n      },\r\n      Add: (state, action: PayloadAction<TModel>) => {\r\n        SliceAdapter.addOne(state.data as EntityState<TModel>, action.payload);\r\n      },\r\n      Remove: (state, action: PayloadAction<string>) => {\r\n        SliceAdapter.removeOne(\r\n          state.data as EntityState<TModel>,\r\n          action.payload\r\n        );\r\n      },\r\n      RemoveAll: (state) => {\r\n        SliceAdapter.removeAll(state.data as EntityState<TModel>);\r\n      },\r\n      UpsetMany: (state, action: PayloadAction<TModel[]>) => {\r\n        SliceAdapter.removeAll(state.data as EntityState<TModel>);\r\n        SliceAdapter.upsertMany(\r\n          state.data as EntityState<TModel>,\r\n          action.payload\r\n        );\r\n      },\r\n    },\r\n    extraReducers: (builder) =>\r\n      extraReducers && extraReducers(builder, SliceAdapter),\r\n  });\r\n  return ModelSlice;\r\n};\r\n\r\nexport const buildThunkDefault = <TModel>(\r\n  builder: ActionReducerMapBuilder<NoInfer<ISliceBase<TModel>>>,\r\n  SliceAdapter: EntityAdapter<TModel>,\r\n  fetchThunk: AsyncThunk<TModel[], any, any>\r\n) => {\r\n  builder\r\n    .addCase(fetchThunk.fulfilled, (state, action) => {\r\n      if(state.RequestId !== action.meta.requestId ) return\r\n      state.Status = LazyStatus.Loaded;\r\n      \r\n      SliceAdapter.removeAll(state.data as EntityState<TModel>);\r\n      SliceAdapter.upsertMany(state.data as EntityState<TModel>, action);\r\n    })\r\n    .addCase(fetchThunk.rejected, (state, action) => {\r\n      if(state.RequestId === action.meta.requestId ){\r\n        state.Status = LazyStatus.Error;\r\n      }\r\n    })\r\n    .addCase(fetchThunk.pending, (state, action) => {\r\n      state.Status = LazyStatus.Loading;\r\n      state.RequestId = action.meta.requestId\r\n    });\r\n};\r\n"],"names":["CreateCRUDSlice","name","selectId","Initial","s","extraReducers","arguments","length","undefined","SliceAdapter","createEntityAdapter","initialState","Status","LazyStatus","Loading","data","getInitialState","ModelSlice","createSlice","reducers","Update","state","action","updateOne","payload","Add","addOne","Remove","removeOne","RemoveAll","removeAll","UpsetMany","upsertMany","builder","buildThunkDefault","fetchThunk","addCase","fulfilled","RequestId","meta","requestId","Loaded","rejected","Error","pending"],"mappings":"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"}