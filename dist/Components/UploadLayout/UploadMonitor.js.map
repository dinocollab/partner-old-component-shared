{"version":3,"file":"UploadMonitor.js","sources":["../../../src/Components/UploadLayout/UploadMonitor.ts"],"sourcesContent":["import EventEmitter from 'events'\r\n\r\nexport type EventUpload = 'Completed' | 'Error' | 'Start' | 'Next' | 'Finished'\r\n\r\ninterface IEventUpload<TModel = any> {\r\n  Completed: TModel\r\n  Error: TModel\r\n  Start: TModel\r\n  Next: TModel\r\n  Finished: any\r\n}\r\n\r\nexport class UploadMonitor<TModel extends { Signal?: AbortController }> {\r\n  constructor(\r\n    numWorker: number,\r\n    executor: (item: TModel, signal?: AbortSignal) => Promise<void>,\r\n    getItem: () => TModel | undefined\r\n  ) {\r\n    this._NumWorker = numWorker\r\n    this._getItem = getItem\r\n    this._executor = executor\r\n    this.events = new EventEmitter()\r\n  }\r\n  events: EventEmitter\r\n  _NumWorker: number\r\n  _lock = new Lock()\r\n  _count = 0\r\n  _getItem: () => TModel | undefined\r\n  _executor: (item: TModel, signal?: AbortSignal) => Promise<void>\r\n\r\n  addEventListen = <key extends keyof IEventUpload<TModel>>(\r\n    event: key,\r\n    callback: (item: IEventUpload<TModel>[key], error?: Error) => void\r\n  ) => {\r\n    return this.events.addListener(event, callback)\r\n  }\r\n  addEventListenFinished = <key extends EventUpload>(event: key, callback: (error?: Error) => void) => {\r\n    return this.events.addListener(event, callback)\r\n  }\r\n  _emit = <key extends EventUpload>(event: key, ...item: any[]) => {\r\n    this.events.emit(event, item)\r\n  }\r\n  getItem = (): Promise<TModel | undefined> => {\r\n    return this._lock.Sync<TModel | undefined>(async () => {\r\n      return this._getItem()\r\n    })\r\n  }\r\n  clearAll = () => {\r\n    this.events.removeAllListeners()\r\n    this._poolTasks = []\r\n  }\r\n  _worker = async () => {\r\n    let item = await this.getItem()\r\n    this._count += 1\r\n    while (item) {\r\n      try {\r\n        this._emit('Start', item)\r\n        item.Signal = new AbortController()\r\n        await this._executor(item, item.Signal.signal)\r\n        this._emit('Completed', item)\r\n      } catch (error) {\r\n        this._emit('Error', item, error)\r\n      } finally {\r\n        item = await this.getItem()\r\n        this._emit('Next', item)\r\n      }\r\n    }\r\n    this._count -= 1\r\n  }\r\n\r\n  _poolTasks: Promise<any>[] = []\r\n  _allTask?: {\r\n    resolve: (value: unknown) => void\r\n    promise: Promise<any>\r\n  }\r\n\r\n  Wait = async () => {\r\n    if (!this._allTask) {\r\n      let resolve = Promise.resolve as (value: unknown) => void\r\n      const promise = new Promise((res) => (resolve = res))\r\n      this._allTask = { promise, resolve }\r\n\r\n      while (this._poolTasks.length) {\r\n        await this._poolTasks.shift()\r\n      }\r\n    } else {\r\n      return this._allTask.promise\r\n    }\r\n    this._allTask = undefined\r\n    this._emit('Finished')\r\n  }\r\n\r\n  start = async () => {\r\n    for (let index = this._count; index < this._NumWorker; index++) {\r\n      this._poolTasks.push(this._worker())\r\n    }\r\n    await this.Wait()\r\n  }\r\n}\r\n\r\nexport class Lock {\r\n  private _listQueue: { res: (p?: any) => void; rej: (p?: any) => void; action: () => Promise<any> }[] = []\r\n  private _lock = false\r\n  Sync = <TResult>(action: () => Promise<TResult>): Promise<TResult> => {\r\n    const response = new Promise<TResult>((res, rej) => {\r\n      this._listQueue.push({ res, action, rej })\r\n    })\r\n    if (!this._lock) this._ProcessQueue()\r\n    return response\r\n  }\r\n  _ProcessQueue = async () => {\r\n    this._lock = true\r\n    while (this._listQueue.length) {\r\n      const item = this._listQueue.shift()\r\n      try {\r\n        item?.res(await item?.action())\r\n      } catch (e) {\r\n        item?.rej(e)\r\n      }\r\n    }\r\n    this._lock = false\r\n  }\r\n\r\n  Once = async <Tmodel>(action: () => Promise<Tmodel>): Promise<Tmodel> => {\r\n    if (this._lock) {\r\n      return await new Promise((res, rej) => {\r\n        this._listQueue.push({ res, action, rej })\r\n      })\r\n    }\r\n    this._lock = true\r\n    try {\r\n      var res = await action()\r\n      this._listQueue.forEach((a) => a.res(res))\r\n      return res\r\n    } catch (e) {\r\n      this._listQueue.forEach((a) => a.rej(e))\r\n      throw e\r\n    } finally {\r\n      this._listQueue = []\r\n      this._lock = false\r\n    }\r\n  }\r\n}\r\n"],"names":["UploadMonitor","_createClass","numWorker","executor","getItem","_this","_classCallCheck","_defineProperty","Lock","event","callback","events","addListener","_len","arguments","length","item","Array","_key","emit","_lock","Sync","_asyncToGenerator","_regenerator","m","_callee","w","_context","n","a","_getItem","removeAllListeners","_poolTasks","_callee2","_t","_context2","v","_count","p","_emit","Signal","AbortController","_executor","signal","f","_callee3","resolve","promise","_context3","_allTask","Promise","res","shift","undefined","_callee4","index","_context4","_NumWorker","push","_worker","Wait","EventEmitter","_this2","action","response","rej","_listQueue","_ProcessQueue","_callee5","_t2","_t3","_t4","_t5","_context5","call","_ref6","_callee6","_t6","_context6","forEach","_x","apply"],"mappings":"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"}