{"version":3,"file":"type.js","sources":["../../../src/ComponentsV2/TableTemplate/type.ts"],"sourcesContent":["import React from 'react'\r\nimport { GridRowIdGetter, GridValidRowModel, GridRowModel, GridFilterModel, GridFilterOperator } from '@mui/x-data-grid'\r\nimport { GridSortModel, DataGridProps, GridColDef, GridCallbackDetails, GridPaginationInitialState } from '@mui/x-data-grid'\r\n\r\nexport interface ITableTemplatePropBases<T extends GridValidRowModel> {\r\n  InnerProps?: Omit<DataGridProps<T> & React.RefAttributes<HTMLDivElement>, 'rows' | 'columns' | 'getRowId'>\r\n  CRUDPannel?: React.JSXElementConstructor<any>\r\n}\r\n\r\ninterface IClientTableTemplateProps<T extends GridValidRowModel> {\r\n  data: T[]\r\n}\r\n\r\ninterface IServerTableTemplateProps<T extends GridValidRowModel> {\r\n  ServerOption: TableServerSide<T>\r\n  PageInfo?: IFetchPagination<T>\r\n  IsInnerState?: boolean\r\n}\r\n\r\nexport interface ITableMode<T extends GridValidRowModel> {\r\n  Server: IServerTableTemplateProps<T>\r\n  Client: IClientTableTemplateProps<T>\r\n}\r\n\r\nexport interface IFetchPagination<T> extends GridPaginationInitialState {\r\n  rowTotal?: number\r\n  data: T[]\r\n}\r\n\r\nexport type GridColDefCconfig<T extends GridValidRowModel> = {\r\n  [key in keyof (T & { [key: string]: any })]?: Omit<GridColDef, 'field'>\r\n}\r\nexport interface ITableOption<T extends GridValidRowModel> {\r\n  getRowId: GridRowIdGetter<T>\r\n  config: GridColDefCconfig<T>\r\n  filterOperators?: (config: GridColDef) => GridFilterOperator[]\r\n  MenuField?: keyof Extract<T, {}> | ((option: ITableOption<T>) => string)\r\n}\r\n\r\nexport interface IFetchModel {\r\n  FilterModel: GridFilterModel\r\n  PaginationModel: GridPaginationInitialState\r\n  GridSortModel: GridSortModel\r\n  details: GridCallbackDetails<'filter'>\r\n  abort: AbortSignal\r\n}\r\n\r\nexport interface TableServerSide<T> {\r\n  FetchFilterData: (model: Partial<IFetchModel>) => Promise<IFetchPagination<T> | void>\r\n  FetchInitialData: () => Promise<IFetchPagination<T> | void>\r\n}\r\n\r\n// Operator\r\nexport enum EOperator {\r\n  GreaterThan,\r\n  LessThan,\r\n  GreaterThanOrEqual,\r\n  LessThanOrEqual,\r\n  NotEqual,\r\n  Equal,\r\n  Contains,\r\n}\r\n\r\nexport interface IConverterConfig {\r\n  pagination?: GridPaginationInitialState\r\n  searchOptions: string[]\r\n}\r\n"],"names":["EOperator"],"mappings":"AAoDA;IACYA;AAAZ,CAAA,UAAYA,SAAS,EAAA;EACnBA,SAAA,CAAAA,SAAA,CAAA,aAAA,CAAA,GAAA,CAAA,CAAA,GAAA,aAAW;EACXA,SAAA,CAAAA,SAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAQ;EACRA,SAAA,CAAAA,SAAA,CAAA,oBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,oBAAkB;EAClBA,SAAA,CAAAA,SAAA,CAAA,iBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,iBAAe;EACfA,SAAA,CAAAA,SAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAQ;EACRA,SAAA,CAAAA,SAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAK;EACLA,SAAA,CAAAA,SAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAQ;AACV,CAAC,EARWA,SAAS,KAATA,SAAS,GAQpB,EAAA,CAAA,CAAA;;;;"}